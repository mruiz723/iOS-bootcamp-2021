//
//  PokemonsWorker.swift
//  VIPPokemon
//
//  Created by Marlon David Ruiz Arroyave on 9/11/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class PokemonsWorker {

    func fetchPokemons(completion: @escaping(Result<[Pokemon], NetworkingError>) -> Void) {
        var pokemons: [Pokemon] = []
        var networkingError: NetworkingError?
        let group = DispatchGroup()
        group.enter()

        PokeAPI().get(urlPath: "pokemon?limit=30") { (result: Result<PokemonList, NetworkingError>) in
            switch result {
            case .success(let pokemonList):
                pokemonList.results.forEach { result in
                    group.enter()
                    PokeAPI().get(urlPath: "/pokemon/\(result.id)/", onCompletion: { (result: Result<Pokemon, NetworkingError>) in
                        switch result {
                        case .success(let pokemon):
                            pokemons.append(pokemon)
                            group.leave()
                        case .failure(let error):
                            networkingError = error
                            group.leave()
                        }
                    })
                }
                group.leave()
            case .failure(let error):
                networkingError = error
                group.leave()
            }
        }

        group.notify(queue: .main) {
            if let networkingError = networkingError {
                completion(.failure(networkingError))
            }
            completion(.success(pokemons))
        }
    }

}
